//frontend/app/page.tsx

'use client';

import { useState } from 'react';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { AlertCircle, FileText, Check } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import TokenizationVisualization from '@/components/TokenizationVisualization';
import ModelExplanation from '@/components/ModelExplanation';

export default function Home() {
  const [text, setText] = useState('');
  const [result, setResult] = useState<null | {
    result: string;
    ai_probability: number;
    ai_percentage: number;
    stats: {
      word_count: number;
      character_count: number;
    }
  }>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const analyzeText = async () => {
    if (!text.trim()) {
      setError('Please enter some text to analyze');
      return;
    }

    setLoading(true);
    setError(null);
    
    try {
      console.log('Sending request with text:', text.substring(0, 100) + '...');
      // Use the Next.js API route as a proxy
      const response = await fetch('/api/detect', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ text }),
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`Server response: ${response.status} ${response.statusText}`, errorText);
        throw new Error(`Failed to analyze text: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      setResult(data);
    } catch (err) {
      setError('Error connecting to the server. Make sure the backend is running.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto py-8 px-4 max-w-4xl">
      <h1 className="text-3xl font-bold text-center mb-2">AI Text Detector</h1>
      <p className="text-center text-muted-foreground mb-8">
        Analyze text to determine if it was written by a human or generated by AI. Final Project by Christopher K for CS4200.
      </p>

      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <Card className="mb-8">
        <CardHeader>
          <CardTitle>Text Analysis</CardTitle>
          <CardDescription>
            Paste your text below to analyze it
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Textarea
            placeholder="Enter or paste text here..."
            className="min-h-[200px] mb-4"
            value={text}
            onChange={(e) => setText(e.target.value)}
          />
        </CardContent>
        <CardFooter className="flex justify-end">
          <Button 
            onClick={analyzeText} 
            disabled={loading || !text.trim()}
          >
            {loading ? 'Analyzing...' : 'Analyze Text'}
          </Button>
        </CardFooter>
      </Card>

      {result && (
        <Card className="mb-8">
          <CardHeader>
            <CardTitle>Analysis Results</CardTitle>
            <CardDescription>
              Our AI model has analyzed your text
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium">Classification</h3>
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                  result.result === "AI-generated" 
                    ? "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-500"
                    : "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-500"
                }`}>
                  {result.result === "AI-generated" ? (
                    <span className="flex items-center gap-1">
                      <AlertCircle className="h-4 w-4" />
                      AI-Generated
                    </span>
                  ) : (
                    <span className="flex items-center gap-1">
                      <Check className="h-4 w-4" />
                      Human-Written
                    </span>
                  )}
                </span>
              </div>
              <div className="space-y-1">
                <div className="flex justify-between text-sm">
                  <span>Human</span>
                  <span>AI</span>
                </div>
                <Progress 
                  value={result.ai_percentage} 
                  className="h-2" 
                />
                <div className="flex justify-end text-sm font-medium">
                  {result.ai_percentage}% likely to be AI-generated
                </div>
              </div>
            </div>

            <div className="pt-4 border-t">
              <h3 className="text-lg font-medium mb-3">Text Statistics</h3>
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-secondary rounded-lg p-4 flex items-center gap-3">
                  <FileText className="h-5 w-5 text-primary" />
                  <div>
                    <p className="text-sm text-muted-foreground">Word Count</p>
                    <p className="text-lg font-medium">{result.stats.word_count}</p>
                  </div>
                </div>
                <div className="bg-secondary rounded-lg p-4 flex items-center gap-3">
                  <FileText className="h-5 w-5 text-primary" />
                  <div>
                    <p className="text-sm text-muted-foreground">Character Count</p>
                    <p className="text-lg font-medium">{result.stats.character_count}</p>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* New Tokenization Visualization Component */}
      {text.trim() && <TokenizationVisualization text={text} />}

      {/* Project Technologies & Development Section */}
      <Card>
        <CardHeader>
          <CardTitle>About This Project</CardTitle>
          <CardDescription>
            How this AI Text Detector works and the technologies behind it
          </CardDescription>
        </CardHeader>
        <CardContent>
          {/* Using our new ModelExplanation component */}
          <ModelExplanation />
        </CardContent>
      </Card>
    </div>
  );
}